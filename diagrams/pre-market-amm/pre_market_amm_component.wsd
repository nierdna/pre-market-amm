@startuml W-Pre-market AMM Component Diagram

' Style
skinparam component {
    BackgroundColor LightBlue
    BorderColor Black
    ArrowColor Black
}

skinparam interface {
    BackgroundColor White
    BorderColor Black
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor Black
}

' Components
package "W-Pre-market AMM System" {
    component [AMM Core] as Core
    component [Price Calculator] as Calculator
    component [Token Minter] as Minter
    component [Liquidity Manager] as LiquidityManager
    component [Swap Engine] as SwapEngine
    component [Fee Manager] as FeeManager
    component [Settlement Manager] as SettlementManager
    database "Liquidity Pool" as Pool
    database "Fee Growth Trackers" as FeeTrackers
    database "LP Position Trackers" as LPTrackers
}

' External actors
actor "LP Provider" as LPProvider
actor "Trader" as Trader

' Interfaces
interface "Add Liquidity" as IAddLiquidity
interface "Remove Liquidity" as IRemoveLiquidity
interface "Swap Tokens" as ISwap
interface "Price Oracle" as IPriceOracle
interface "Collect Fees" as ICollectFees
interface "Settlement" as ISettlement
interface "Swap Pre-Token for Token" as ISwapForToken

' Connections
LPProvider -- IAddLiquidity
LPProvider -- IRemoveLiquidity
LPProvider -- ICollectFees
LPProvider -- ISettlement
Trader -- ISwap
Trader -- ISwapForToken
Core -- IPriceOracle

IAddLiquidity - LiquidityManager
IRemoveLiquidity - LiquidityManager
ICollectFees - FeeManager
ISwap - SwapEngine
IPriceOracle - Calculator
ISettlement - SettlementManager
ISwapForToken - SettlementManager

Core --> Calculator : uses
Core --> Minter : uses
Core --> LiquidityManager : uses
Core --> SwapEngine : uses
Core --> FeeManager : uses
Core --> SettlementManager : uses
LiquidityManager --> Pool : manages
LiquidityManager --> LPTrackers : tracks positions
SwapEngine --> Pool : reads/updates
SwapEngine --> FeeManager : calculates fees
FeeManager --> FeeTrackers : updates
FeeManager --> Pool : collects from
Calculator --> Pool : reads state
SettlementManager --> Pool : manages settlement
SettlementManager --> LPTrackers : reads position data

' Notes with formulas
note right of Calculator
  <b>Key Formulas:</b>
  
  <b>Liquidity:</b>
  L = x / (1/√Pa - 1/√Pb)
  
  <b>At price P:</b>
  x = L · (1/√P - 1/√Pb)
  y = L · (√P - √Pa)
  
  <b>General formula:</b>
  y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
end note

note bottom of Pool
  Contains:
  - Base token (ETH, USDC, etc.)
  - pre-token
  - Real token (after TGE)
  - Current price information
  - Liquidity parameters (Pa, Pb)
end note

note bottom of Minter
  Mints new pre-token when:
  - LP providers add liquidity
  - System needs to maintain price bounds
end note

note bottom of SwapEngine
  Handles:
  - Buy pre-token with base token
  - Sell pre-token for base token
  - Calculates price impact
  - Ensures trades follow bonding curve
end note

note bottom of SettlementManager
  Manages settlement phase after TGE:
  - Handles LP withdrawal with token requirements
  - Manages 1:1 swaps of pre-token for real token
  - Tracks collateral and initial pre-token amounts
end note

note bottom of LPTrackers
  Tracks LP positions:
  - Collateral amounts
  - Initial pre-token amounts
  - Required token amounts for settlement
end note

@enduml 