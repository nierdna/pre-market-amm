@startuml W-Pre-market AMM System

' Define participants
actor "LP Provider" as LPProvider
actor "Trader" as Trader
participant "W-Pre-market AMM" as AMM
database "Liquidity Pool" as Pool
participant "Price Calculator" as Calculator
participant "Token Minter" as Minter
participant "Fee Manager" as FeeManager
database "Fee Trackers" as FeeTrackers
participant "Settlement Manager" as Settlement
database "LP Position Trackers" as LPTrackers
participant "Early Withdrawal Handler" as EarlyWithdrawal

' Style
skinparam sequence {
    ParticipantBackgroundColor LightBlue
    ActorBackgroundColor LightGreen
    DatabaseBackgroundColor LightPink
    LifeLineColor Gray
    BorderColor Black
}

' Define mathematical formulas as notes
note left of LPProvider
  <b>Key Formulas:</b>
  
  <b>Liquidity:</b>
  L = x / (1/√Pa - 1/√Pb)
  
  <b>At price P:</b>
  x = L · (1/√P - 1/√Pb)
  y = L · (√P - √Pa)
  
  <b>General formula:</b>
  y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
end note

' LP Provider Flow
group LP Provider Adds Liquidity
    LPProvider -> AMM: Add Liquidity (x base token, Pa, Pb)
    activate AMM
    
    AMM -> Calculator: Calculate liquidity parameters
    activate Calculator
    
    Calculator -> Calculator: Calculate L = x / (1/√Pa - 1/√Pb)
    Calculator -> Calculator: Calculate y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
    Calculator --> AMM: Return y (amount of pre-token needed)
    deactivate Calculator
    
    AMM -> Minter: Request to mint y pre-token
    activate Minter
    Minter --> AMM: Return newly minted pre-token
    deactivate Minter
    
    AMM -> Pool: Add x base token + y pre-token to pool
    AMM -> Pool: Add x base token as collateral
    AMM -> LPTrackers: Record collateral amount and initial pre-token amount
    AMM --> LPProvider: Issue LP tokens representing share of pool
    
    deactivate AMM
end

' Trader Flow - Buy pre-tokens
group Trader Buys pre-tokens
    Trader -> AMM: Buy pre-tokens with x base token
    activate AMM
    
    AMM -> FeeManager: Calculate fee (e.g., 0.3% of x)
    activate FeeManager
    FeeManager --> AMM: Return fee amount
    deactivate FeeManager
    
    AMM -> Calculator: Calculate output amount (with x - fee)
    activate Calculator
    
    Calculator -> Calculator: Calculate current price based on pool ratio
    Calculator -> Calculator: Calculate output pre-token based on formula
    Calculator --> AMM: Return output amount of pre-token
    deactivate Calculator
    
    AMM -> Pool: Update base token and pre-token according to formula
    
    AMM -> FeeManager: Update fee growth trackers
    activate FeeManager
    FeeManager -> FeeTrackers: Record fees for current price range
    FeeManager --> AMM: Confirm fee tracking update
    deactivate FeeManager
    
    AMM --> Trader: Send pre-token to trader
    
    deactivate AMM
end

' Trader Flow - Sell pre-tokens
group Trader Sells pre-tokens
    Trader -> AMM: Sell y pre-tokens
    activate AMM
    
    AMM -> Calculator: Calculate output amount
    activate Calculator
    
    Calculator -> Calculator: Calculate current price based on pool ratio
    Calculator -> Calculator: Calculate output base token based on formula
    Calculator --> AMM: Return output amount of base token
    deactivate Calculator
    
    AMM -> Pool: Remove base token and pre-token according to formula
    AMM --> Trader: Send base token to trader
    
    deactivate AMM
end

' Add a new flow for fee collection
group LP Provider Collects Fees
    LPProvider -> AMM: Request to collect fees for position (LP token ID)
    activate AMM
    
    AMM -> FeeManager: Calculate uncollected fees for position
    activate FeeManager
    
    FeeManager -> FeeTrackers: Get fee growth since last collection
    FeeManager -> FeeManager: Calculate fees owed based on liquidity share
    FeeManager --> AMM: Return uncollected fees (base token, pre-token)
    deactivate FeeManager
    
    AMM -> Pool: Withdraw fee amounts
    AMM --> LPProvider: Send collected fees (base token, pre-token)
    
    AMM -> FeeManager: Update position's fee tracking data
    activate FeeManager
    FeeManager -> FeeTrackers: Reset tokens owed, update last fee growth
    FeeManager --> AMM: Confirm update
    deactivate FeeManager
    
    deactivate AMM
end

' Add a new flow for LP Provider withdrawing liquidity before settlement phase
group LP Provider Withdraws Liquidity Before Settlement
    LPProvider -> AMM: Request to withdraw liquidity early (LP token ID)
    activate AMM
    
    AMM -> EarlyWithdrawal: Process early withdrawal request
    activate EarlyWithdrawal
    
    EarlyWithdrawal -> LPTrackers: Get initial pre-token amount
    EarlyWithdrawal -> Pool: Get current pre-token balance for position
    EarlyWithdrawal -> EarlyWithdrawal: Compare current vs initial pre-token
    
    alt Current pre-token < Initial pre-token
        note over EarlyWithdrawal: LP Provider has less pre-token than initially minted
        EarlyWithdrawal -> EarlyWithdrawal: Calculate penalty = (initial - current) * penalty rate
        EarlyWithdrawal -> Pool: Apply penalty to collateral
        EarlyWithdrawal -> Pool: Remove liquidity (base token - penalty)
        EarlyWithdrawal -> Pool: Return remaining collateral (collateral - penalty)
        EarlyWithdrawal --> AMM: Return base token (minus penalty) and remaining collateral
        
        AMM --> LPProvider: Send base token (minus penalty) and remaining collateral
        note right: LP Provider receives less than full collateral due to penalty
    else Current pre-token > Initial pre-token
        note over EarlyWithdrawal: LP Provider has more pre-token than initially minted (profit)
        EarlyWithdrawal -> Pool: Remove liquidity (base token)
        EarlyWithdrawal -> Pool: Return full collateral
        EarlyWithdrawal -> Pool: Calculate excess pre-token = current - initial
        EarlyWithdrawal -> Pool: Transfer this pre-token to LP Provider
        EarlyWithdrawal --> AMM: Return base token, collateral, and pre-token
        
        AMM --> LPProvider: Send base token, full collateral, and pre-token
        note right: LP Provider receives full collateral plus pre-token, which can be converted to token when settlement phase has ended
    end
    
    EarlyWithdrawal -> Pool: Burn LP tokens
    EarlyWithdrawal --> AMM: Confirm withdrawal completed
    deactivate EarlyWithdrawal
    
    deactivate AMM
end

' Add a new flow for settlement phase
group Enter Settlement Phase (After TGE)
    note over AMM, Settlement: System enters settlement phase after token generation event (TGE)
    
    AMM -> Settlement: Enter settlement phase with real token
    activate Settlement
    Settlement -> Pool: Add real token to pool
    Settlement -> Pool: Set isSettlementPhase = true
    Settlement --> AMM: Confirm settlement phase entered
    deactivate Settlement
end

' Settlement phase flows have been moved to a separate file: settle_ended_phase.wsd
note over AMM, Settlement: For settlement phase flows (LP Provider Withdraws Liquidity in Settlement Phase and Trader Swaps Pre-Token for Token), see settle_ended_phase.wsd

' Add notes
note over AMM: Automated Market Maker for pre-market tokens
note over Pool: Contains base token (ETH, USDC, etc.) and pre-token
note over Calculator: Implements the bonding curve formulas
note over Minter: Creates new pre-token when liquidity is added
note over LPProvider: Provides liquidity with base token and price range (Pa to Pb)
note over Trader: Trades base token for pre-token or vice versa
note over FeeManager: Tracks and manages fee collection for LP positions
note over FeeTrackers: Stores fee growth data for each price range
note over Settlement: Manages settlement phase after TGE
note over LPTrackers: Tracks LP positions, collateral and initial pre-token amounts
note over EarlyWithdrawal: Handles early withdrawal before settlement phase with penalties or bonuses

@enduml 